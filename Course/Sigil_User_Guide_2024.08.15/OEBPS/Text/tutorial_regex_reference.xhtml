<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en" xml:lang="en">
<head>
  <title>Use Regular Expressions</title>
  <link href="../Styles/styles.css" type="text/css" rel="stylesheet"/>
</head>

<body>
  <h2>Regular Expression Reference</h2>

  <p class="h2subheading">— Regex Reference —</p>

  <p>This tutorial is basically a quick reference for Regex.</p>

  <p>Regex is a very powerful way for you to edit and cleanup your EPUB when using Find &amp; Replace. However, when you first start using regex it can be confusing because there are a lot of commands you can use. This is a brief summary of some basic regex commands.</p>

  <p>You can find more details about regex at these links (or ask for help in the Sigil forum):</p>

  <ul>
    <li><a href="https://www.mobileread.com/forums/showthread.php?t=118569">Regex overview at MobileRead</a></li>

    <li><a href="https://www.regular-expressions.info/tutorial.html">An Online Regex tutorial/reference</a></li>

    <li><a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/">A one page command summary</a></li>

    <li><a href="https://docs.python.org/3/library/re.html">Regex as used by Python</a></li>

    <li><a href="https://www.pcre.org/pcre.txt">Official PCRE details – start at the PCRESYNTAX(3) section</a></li>
  </ul>

  <h3 class="sigil_not_in_toc" id="regex_overview">Overview</h3>

  <p class="sigilNotInTOC">When using regex commands in Find &amp; Replace the purpose is to allow you to search for patterns instead of exact text. This means that you can tell Find &amp; Replace to search for “a number” instead of “8”, or to match any words between certain tags and then replace it with new tags or new words.</p>

  <p>In order to allow you to search for patterns, you need to use regex commands in place of the specific text you want in your search. For instance, instead of searching for <span class="example">8</span> you could search for <span class="example">\d</span> (which means one digit) or <span class="example">\d+</span> (which means one or more digits).</p>

  <p>An example Find &amp; Replace command using regex might be to change all level 1 headings to level 2 headings:</p>

  <ul>
    <li><span class="listheading">Find:</span> <span class="example">&lt;h1(.*?)&lt;/h1&gt;</span></li>

    <li><span class="listheading">Replace:</span> <span class="example">&lt;h2\1&lt;/h2&gt;</span></li>
  </ul>

  <p>where the Find command searches for any text between the h1 start and end tags, and using <span class="example">()</span> to save the text. (The start tag is left open in order to catch any class definitions, and the <span class="example">?</span> tells <span class="example">.*</span> to do minimal matching). The Replace command is used to replace the matched text with the saved text (indicated by <span class="example">\1</span>) surrounded by the h2 start and end tags.</p>

  <p>The following sections give a sample of common regex commands that you may find useful.</p>

  <h3 class="sigil_not_in_toc" id="regex_modifiers">General Modifiers:</h3>

  <p>You can put these commands at the start of any regex to modify how the expression behaves:</p>

  <ul>
    <li><span class="example">(?s)</span> – search across lines when using <span class="example">.*</span> since by default <span class="example">.*</span> only matches within a line of text. This is done by the DotAll option in Find &amp; Replace.</li>

    <li><span class="example">(?U)</span> – match the first occurrence of your string (also called minimal or ungreedy matching). This is very useful when using <span class="example">.*</span> to avoid matching too much. This is done by the Minimal Match option in Find &amp; Replace.</li>

    <li><span class="example">(?i)</span> – ignore case when matching.</li>

    <li><span class="example">(*UCP)</span> – enables unicode properties for the expression that follows.</li>
  </ul>

  <p>You can combine modifiers, e.g. <span class="example">(?sU)</span> is commonly used.</p>

  <h3 class="sigil_not_in_toc">Single Characters:</h3>

  <p>You can use these regex commands to represent single characters:</p>

  <ul>
    <li><span class="example">.</span> – matches one character</li>

    <li><span class="example">\d</span> – match one digit</li>

    <li><span class="example">\t</span> – match one tab</li>

    <li><span class="example">[abc]</span> – any character that is a b or c</li>

    <li><span class="example">[^abc]</span> – any character that is NOT a b or c</li>

    <li><span class="example">[0-9]</span> – any digit from 0 to 9</li>

    <li><span class="example">[[:alpha:]]</span> – any letter, upper or lower case</li>

    <li><span class="example">[^[:alnum:]]</span> – any character that is NOT a digit or upper or lowercase letter</li>
  </ul>

  <h3 class="sigil_not_in_toc">Multiple Characters:</h3>

  <p>These regex quantifiers or codes allow you to represent multiple characters:</p>

  <ul>
    <li><span class="example">*</span> – use after a character to mean 0 or more, e.g. <span class="example">.*</span> means 0 or more of any character</li>

    <li><span class="example">+</span> – use after a character to mean 1 or more, e.g. <span class="example">\d+</span> means 1 or more digits</li>

    <li><span class="example">?</span> – use after a character to mean 0 or 1 instance, e.g. <span class="example">\d?</span> means none or 1 digit</li>

    <li><span class="example">\s</span> – matches whitespace, including space, tab, end of line carriage returns or newlines</li>
  </ul>

  <p>And there is a special character that tells your search to stop at the first match it finds instead of the largest match which you can use instead of the general modifier <span class="example">(?U)</span>:</p>

  <ul>
    <li><span class="example">?</span> – use after a quantifier to do a minimal search, e.g. <span class="example">.*?</span> or <span class="example">\d+?</span></li>
  </ul>

  <h3 class="sigil_not_in_toc">Groups:</h3>

  <p>In some cases you need to group your expressions together so that, for example, you can save them for a later replace, or to indicate a choice of words:</p>

  <ul>
    <li><span class="example">(atext|btext)</span> – atext or btext</li>

    <li><span class="example">(group)</span> – group the words together for later retrieval – you can use multiple groups</li>
  </ul>

  <h3 class="sigil_not_in_toc">Replacing:</h3>

  <p>When replacing text, one of the most useful features is to be able to use text that was matched by storing it in a group. Once you have grouped text you can reference it in your replace command:</p>

  <ul>
    <li><span class="example">\1</span> – use in Replace to retrieve the value of a saved group (use <span class="example">\2</span> for the second group, etc.)</li>
  </ul>
</body>
</html>